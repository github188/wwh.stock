//数组去重
Array.prototype.unique = function (){
    var i = 0, len = this.length, ret = [];

    for (; i < len; i++){
        if ( ret.indexOf(this[i]) === -1 ){
            ret.push(this[i]);
        }
    }
    return ret;

};

//四舍五入
Math.forDight = function(Dight, How) {
    var rDight = parseFloat(Dight).toFixed(How);
    if (rDight == "NaN") {
        rDight = "--";
    }
    return rDight;
};

//日期格式化
Date.prototype.format = function(format) {
    var _this = this;
    if (typeof _this == "undefined") {
        _this = new Date();
    }
    var ret = "";
    format = (format == null) ? "yyyy-MM-dd HH:mm:ss" : format;
    var year = _this.getFullYear();
    var month = _this.getMonth() + 1;
    var date = _this.getDate();
    var hours = _this.getHours();
    var minutes = _this.getMinutes();
    var seconds = _this.getSeconds();
    var MM = (month > 9) ? month : "0" + month;
    var dd = (date > 9) ? date : "0" + date;
    var HH = (hours > 9) ? hours : "0" + hours;
    var mm = (minutes > 9) ? minutes : "0" + minutes;
    var ss = (seconds > 9) ? seconds : "0" + seconds;
    ret = format.replace("yyyy", year).replace("MM", MM).replace("dd", dd).replace("HH", HH).replace("mm", mm).replace("ss", ss).replace("M", month).replace("d", date).replace("H", hours).replace("m", minutes).replace("s", seconds);
    return ret;
};

Object.prototype.extend = function(param){

    if(!param){
        return this;
    }

    for(var property in param){
        if( this[property] ||  (property in this) ){
            continue;
        }

        this[property] =  param[property];
    }
    return this;
};


Function.prototype.extend = function(){
    var T = new Function;
    T.prototype =  this.prototype;
    return new T();
};

/*
 * #{data}_{classid}_{subclass}?*
 * @ data 数据ID
 * @ classid 行情类别ID
 * @ subclass 行情子类别ID
 */
var route = {

    url: location.href,
    hash: location.hash,

    parse: function(_url) {
        if(_url){
            this.url = _url;

            if(_url.indexOf("#") > -1){
                this.hash = "#" + _url.split("#")[1];
            }
        }

        var hash = this.hash.split("?");
        hash[0] = hash[0].split("_");

        return {
            data: hash[0][0],
            classid: hash[0][1],
            subclass: hash[0][2],
            optid:"",
            query: hash[1]
        };
    },
    parseopt: function(_opt) {
        var hash = this.hash.split("?");
        hash[0] = hash[0].split("_");
        return {
            data: hash[0][0],
            classid: hash[0][1],
            subclass: hash[0][2],
            optid:_opt,
            query: hash[1]
        };
    }
};

function setBrendNav(container, name, callback){
    if (setBrendNav.data[name]){
        container.innerHTML =  '<a href="http://quote.eastmoney.com/center/">行情中心首页</a> &gt; ' + setBrendNav.data[name].join(" > ");
        callback(setBrendNav.data[name]);
        return;
    }

    ajax.get("tree.xml", function(doc){
        var path = [];
        var list = mini("m[h='" + name + "']", doc);
        var href = "";
        var menu = "";
        var e;
        if(list.length < 1){
            list = mini("m[h^='" + name + "']", doc);
        }
        e  = list.pop();
        if(!e) return;
        menu = e.getAttribute("t");
        path.push(menu);

        while ((e = e.parentNode) && e.nodeName === "m"){

            href = (e.getAttribute("n") || "") + (!!e.getAttribute("h") ? "#" + e.getAttribute("h") : "");

            if(href) {
                menu = '<a href="' + href + '" target="_blank">' + e.getAttribute("t") + '</a>';

            }else {
                menu = e.getAttribute("t");
            }

            path.push(menu);
        }

        path = path.reverse();
        container.innerHTML = '<a href="http://quote.eastmoney.com/center/" target="_blank">行情中心首页</a> &gt; ' + path.join(" > ");
        if(callback){
            callback(path);
        }
        setBrendNav.data[name] = path;
    });
}
setBrendNav.data = {};


//行情导航中心菜单
(function(name, ns) {

    function isCurent(target) {
        var referer = location.href;
        var url = target && target.href;
        //alert(url+","+referer+ " " + (url === referer) )

        return url === referer;
    }

    //class TreeMenu{
    function TreeMenu(container) {
        /*属性*/
        var _this = this;
        this.container = mini(container)[0];


        var i;

        //bind sections click
        this.sections = mini(".node-section dt");
        for (i = 0; i < this.sections.length; i++) {
            dom(this.sections[i]).on("click", function(target) {
                var section = dom(this.parentNode);
                if (section.hasClass("js-section-open")) {
                    section.removeClass("js-section-open");
                } else {
                    section.addClass("js-section-open");
                }
            });
        }

        //bind sub click
        this.subnodes = mini("span.node-item", this.container);
        for (i = 0; i < this.subnodes.length; i++) {
            dom(this.subnodes[i]).on("click", function(target) {
                var subNode = dom(this.parentNode);
                if (subNode.hasClass("js-sub-open")) {
                    subNode.attr("class", "js-sub");
                } else {
                    _this.resetsub();
                    subNode.attr("class", "js-sub-open");
                }

            });
        }

        //bind hover
        this.subsub = mini(".node-sub-sub", this.container);
        for (i = 0; i < this.subsub.length; i++) {
            dom(this.subsub[i]).on("mouseout", function(target) {
                dom(this).attr("class", "node-sub-sub");
            });

            dom(this.subsub[i]).on("mouseover", function(target) {
                dom(this).attr("class", "node-sub-sub-hover");
                this.hoverpop = this.hoverpop || mini(".hover-pop", this)[0];

                //设置hover菜单位置
                if (!this.hoverpop) return;
                var content = this.hoverpop.clientHeight + dom(this).offset().top;
                var doc = utils.windowSize().height + utils.documentScrollTop();
                if (doc - content < -2) {
                    this.hoverpop.style.top = (doc - content) + "px";
                } else {
                    this.hoverpop.style.top = "-2px";
                }

            });
        }
    }



    TreeMenu.prototype = {
        resetsub: function() {
            var subElem = null;
            for (i = 0; i < this.subnodes.length; i++) {
                dom(this.subnodes[i].parentNode).attr("class", "js-sub");
            }
        },
        init: function(option) {
            var classid, subclass, subNodes;
            //初始化展开
            option.classid = option.classid || "0";
            if(option.optid=="hszx"){option.classid="11";option.subclass="0";option.data="#hszx";};
            if(option.optid=="hkzx"){option.classid="11";option.subclass="1";option.data="#hkzx";};
            if(option.optid=="tzrl"){option.classid="11";option.subclass="2";option.data="#tzrl";};
            for (var i = 0, n = this.sections.length; i < n; i++) {
                classid = dom(this.sections[i].parentNode).attr("data-id");
                if (classid !== option.classid) { continue; }

                dom(this.sections[i].parentNode).addClass("js-section-open");
                subNodes = mini("dd", this.sections[i].parentNode);
                for (var j = 0, length = subNodes.length; j < length; j++) {
                    subclass = dom(subNodes[j]).attr("data-id");
                    if (subclass !== option.subclass) { continue; }
                    dom(subNodes[j]).attr("class", "js-sub-open");
                    break;
                }
                break;
            }

            this.setCurrent(window.location.href,option.optid);

        },

        setCurrent: function(_url,optid) {
            var key = this._getKey(_url);
            if(optid=="hszx"){key="hszx_11_0";}
            if(optid=="hkzx"){key="hkzx_11_1";}
            if(optid=="tzrl"){key="tzrl_11_2";}
            var current = this._getMenuItemByKey(key);
            if(_url.indexOf("28003707_12_2")!=-1){
                current = this._getMenuItemByKey("28003707_12_2")
            }
            if (current != null) {
                if (this.current && this.current != current) {
                    dom(this.current).attr("class", "node-item");
                }

                dom(current).attr("class", "node-item-current");
                this.current = current;
            }
        }
    };

    TreeMenu.prototype.getHash = function(url) {
        return String(/#(?:[\w,\.])+/.exec(url));
    };

    TreeMenu.prototype._getKey = function(url) {

        var hash = this.getHash(url); //获取
        var banKaiPaihang = url.indexOf("notion_0_0") != -1 ||
            url.indexOf("area_0_0") != -1 ||
            url.indexOf("trade_0_0") != -1;

        if (hash.indexOf("#2800") != -1) {
            hash = hash.substring(1, 6);
        } else {
            hash = hash.substring(1);
            if (banKaiPaihang) {
                hash = hash + "_" + utils.getQueryString("sortRule", "0", url);
            }
        }

        return hash;
    };
    TreeMenu.prototype._getMenuItemByKey = function(key) {

        var elts = this.elts || mini(".node-item", this.container);
        var menuItem = null;
        this.elts = elts;

        for (var i = 0, n = elts.length; i < n; i++) {
            if (dom(elts[i]).attr("data-key") === key) {
                menuItem = elts[i];
                break;
            }
        }

        return menuItem;
    };

    ns[name] = TreeMenu;
    //}
} ("TreeMenu", window));

//行情图
(function(name, ns) {

//class ChartView {
    function ChartView(images) {
        this.charts = [];
        this.lazys = [];
        __init__.call(this, images);
    }

    var __init__ = function(images) {
        var element = {};
        var chart = {};
        var src = "";
        var id = "";

        for (var i = 0, n = images.length; i < n; i++) {

            element = images[i];
            if (!!element) {
                src = element.src || element.getAttribute("data-src");
                chart = new ChartEntity(element, src);
                this.charts.push(chart);
            }
        }
    };

    ChartView.prototype.render = function() {
        var chart = {};
        for (var i = 0, n = this.charts.length; i < n; i++) {
            chart = this.charts[i];
            chart.reload();
        }
    };

    ChartView.prototype.each = function(handle, context){
        for (var i = 0, n = this.charts.length; i < n; i++) {
            handle.call(context, this.charts[i], i);
        }

    };

    function ChartEntity(element, src) {
        this.element = element;
        this.src = src;
    }

    ChartEntity.prototype.reload = function() {
        var img = this.element;
        var src = this.src;
        var uid = +new Date();
        var reg = /(\?|&)dt=(?:\d+?)/;
        if(reg.test(src)) {
            img.src = src.replace(reg, "$1dt=" + uid);
        }else {
            uid = (src.indexOf("?") > -1 ? "&" : "?") + "dt=" + (+new Date());
            img.src = src + uid;
        }
    };

    //export
    ns[name] = ChartView;
//}
} ("ChartView", window));


//选项卡切换控件
(function(name, ns) {
    //class TabView{ 
    function TabView(selected) {
        this.tabs = [];
        this.panels = [];
        this.onchange = new Function();
        this.selected = selected;
    }

    function _removeClass(elem, className) {
        dom(elem).removeClass(className);
    }

    function _addClass(elem, className) {
        dom(elem).addClass(className);
    }

    function _hasClass(elem, className) {
        return dom(elem).hasClass(className);
    }

    function _clear() {
        var tabs = this.tabs,
            panels = this.panels,
            onFocusClassName = this.onFocusClassName,
            onblurClassName = this.onblurClassName;

        //clear tabs
        for (var j = 0; j < tabs.length; j++) {
            if (_hasClass(tabs[j], onFocusClassName)) {
                _removeClass(tabs[j], onFocusClassName);
                _addClass(tabs[j], onblurClassName);
                break;
            }
        }

        //clear panels
        if (panels[j] && _hasClass(panels[j], onFocusClassName)) {
            _removeClass(panels[j], onFocusClassName);
            _addClass(panels[j], onblurClassName);
        }
    }
    TabView.prototype.select = function(i) {
        var i = this.selected;
        var tab = this.tabs[i];
        var panel = this.panels[i];
        var onFocusClassName = this.onFocusClassName;
        var onblurClassName = this.onblurClassName;

        _clear.call(this);

        //set tab
        if (tab) {
            _removeClass(tab, onblurClassName);
            _addClass(tab, onFocusClassName);
        }

        //set panel
        if (panel) {
            _removeClass(panel, onblurClassName);
            _addClass(panel, onFocusClassName);
        }
    };

    TabView.prototype.init = function(eventName, onFocusClassName, onblurClassName) {
        var _this = this,
            tabs = _this.tabs;
        onblurClassName = onblurClassName || "";
        eventName = eventName || "mouseover";
        _this.onFocusClassName = onFocusClassName;
        _this.onblurClassName = onblurClassName;
        if (_this.selected) {
            _this.select();
        }
        for (var i = 0; i < tabs.length; i++) {
            tabs[i].key = i;
            tabs[i]["on" + eventName] = function() {
                _this.selected = selected = this.key;
                _this.select();
                _this.onchange(selected);

            };
        }
    };

    //export
    ns[name] = TabView;
    //}	
} ("TabView", window));

(function(name, ns) {

    //文字闪烁
    //TextGif.init()
    function TextGif(context) {
        context = context || document;
        var _this = this;
        var tempStatus = [];
        var colorStatus = [];
        var sansuoNum = 0;
        var intervalID;

        this.config = {
            tag: "span",

            style: {
                className: "js-gif",
                color: "#000"
            }
        };

        this.init = function(parent) {
            if (parent) {
                context = parent;
            }
            clearInterval(intervalID);
            intervalID = setInterval(function() {
                _this.run();
            }, 300);
        };

        this.run = function() {

            var config = this.config;
            var elems = context.getElementsByTagName(config.tag);
            var length = elems.length;
            var elem, hook;

            for (i = 0; i < length; i++) {
                elem = elems[i];
                hook = elem.className;


                colorStatus[i] = !colorStatus[i];
                if (hook.indexOf(config.style.className) > -1) {

                    if (colorStatus[i]) {
                        elem.style.color = tempStatus[i];
                    }
                    else {
                        tempStatus[i] = elem.style.color;
                        elem.style.color = config.style.color;
                    }
                }
            }

            sansuoNum++;
            if (sansuoNum > 6) {
                clearInterval(intervalID);
                sansuoNum = 0;
                tempStatus = [];
                colorStatus = [];
            }
        };
    }
    ns[name] = TextGif;
} ("TextGif", window));


//JS分页导航
/*
 var pagenav = new PageNavigation("container", 6);
 pagenav.onchange = function(i){
 alert(i)
 }
 pagenav.nav(1)
 pagenav.render();
 */
(function(ns) {

    function PageNavigation(container, pagecount) {

        var get = function(id) {
            return document.getElementById(id);
        };

        var _this = this;

        _this.container = get(container);
        _this.nextpage = get("nextpage");
        _this.prepage = get("prepage");
        _this.pagecount = pagecount || 0;
        _this.container.onclick = function(event) {

            event = event || window.event;
            var target = event.target || event.srcElement;
            var page = target.getAttribute("data-page");
            var controlid = target.getAttribute("data-get");
            var property = target.getAttribute("data-property");

            if (controlid && property) {//转到

                page = get(controlid)[property];
            }

            if (page !== null && !isNaN(page)) {
                _this.change(page);
            }
        };

    }
    //根据UI 设置config
    PageNavigation.prototype.config = {

        itemscount: 10,
        disable: "<span>{$text}</span>",
        nextpage: " <span><a href=\"javascript:void(null)\"  data-page='{$nextpage}' >下一页</a></span> ",
        prepage: " <span><a href=\"javascript:void(null)\" data-page='{$prepage}'>上一页</a></span> ",
        pageitem: " <a href=\"javascript:void(null)\" data-page='{$num}'>{$num}</a> ",
        current: "<span class='current'>{$num}</span>",
        firstpage: "<a data-page='1'>1</a><span class='page-break'>...</span>",
        lastpage: "<span class='page-break'>...</span><a data-page='{$pagecount}'>{$pagecount}</a>",
        gopage: '转到<input type="text" value="{$num}" id="pagenum"/>页 ' +
        '<input type="button" data-get="pagenum" data-property="value" value="Go"/>'
    };

    PageNavigation.prototype.change = function(num) {
        var _this = this;
        if (!isNaN(num)) {
            _this.listitems = [];
            _this.nav(parseInt(num));
            _this.render();
        }
        _this.onchange(num);
        _this.pageChange(num);/*?*/

    };

    PageNavigation.prototype.reset = function() {
        this.listitems = [];
        this.prepage = false;
        this.firstpage = false;
        this.nextpage = false;
        this.lastpage = false;
    };

    //回调函数
    PageNavigation.prototype.onchange = new Function();
    PageNavigation.prototype.pageChange = new Function();/*?*/

    //分页逻辑
    PageNavigation.prototype.nav = function(n) {
        var startpagenum = 1, endpagenum = this.pagecount, length = (this.config.itemscount - 1) / 2;
        this.reset();
        if(isNaN(n)){n=1;}
        if (n < 1) n = 1;
        if (n > this.pagecount) n = this.pagecount;
        if (n !== 1) {
            this.prepage = this.config.prepage;
            if (n - length > 1) {
                startpagenum = n - length;
                this.firstpage = this.config.firstpage;
                if(n==4){
                    this.firstpage=this.firstpage.replace("...","");
                }
            }

            for (var i = startpagenum; i < n; i++) {
                this.listitems.push(this.createPageItem(i));
            }
        }
        this.listitems.push(this.createCurrentItem(n));
        if (n !== this.pagecount) {
            this.nextpage = this.config.nextpage;
            length = this.config.itemscount - this.listitems.length;
            if (n + length < this.pagecount) {
                endpagenum = n + length;
                this.lastpage = this.config.lastpage;
                if(this.pagecount-n==3){
                    this.lastpage=this.lastpage.replace("...","");
                }
            }

            for (var i = n + 1; i <= endpagenum; i++) {
                this.listitems.push(this.createPageItem(i));
            }
        }
        this.page = n;
    };

    PageNavigation.prototype.render = function() {

        var listitems = this.listitems.join("");
        var nextpage = this.nextpage;
        var prepage = this.prepage;
        var gopage = this.config.gopage;

        var html = [];
        if (!prepage) {
            prepage = this.config.disable.replace(/\{\$text\}/g, "上一页");
        }
        html.push(prepage.replace(/\{\$prepage\}/g, this.page - 1));

        if (this.firstpage) {
            html.push(this.firstpage);
        }

        html.push(listitems);

        if (this.lastpage) {
            html.push(this.lastpage.replace(/\{\$pagecount\}/g, this.pagecount));
        }

        if (!nextpage) {
            nextpage = this.config.disable.replace(/\{\$text\}/g, "下一页");
        }

        html.push(nextpage.replace(/\{\$nextpage\}/g, this.page + 1));

        html.push(gopage.replace(/\{\$num\}/g, this.page));

        if (this.container) {
            this.container.innerHTML = html.join("");
        }
        return html.join("");

    };

    PageNavigation.prototype.createPageItem = function(i) {
        return this.config.pageitem.replace(/\{\$num\}/g, i);
    };

    PageNavigation.prototype.createCurrentItem = function(i) {
        return this.config.current.replace(/\{\$num\}/g, i);
    };

    ns.PageNavigation = PageNavigation;
} (this));


//表头固定
(function(ns) {

    function FixedTableHeader(table) {

        var userAgent = navigator.userAgent;
        var offset = dom(table).offset();
        var x = offset.left;
        var y = offset.top;
        var tableHeader = _initTableHeader(table, x, y);

        //滚动事件处理函数
        function scrollHandler() {

            var scrollTop = utils.documentScrollTop();
            var scrollLeft = utils.documentScrollLeft();

            if (scrollTop >= y) {

                tableHeader.style.display = "";
                if (userAgent.indexOf("MSIE 6") > -1) {

                    tableHeader.style.position = "absolute";
                    tableHeader.style.top = scrollTop + "px";

                } else {

                    tableHeader.style.position = "fixed";
                    tableHeader.style.top = 0;

                }
            }
            else {

                tableHeader.style.display = "none";
                tableHeader.style.position = "absolute";
                tableHeader.style.top = y + "px";
            }
        }

        function change() {
            var row = table.getElementsByTagName("tr")[0];
            var clone = tableHeader.getElementsByTagName("tr")[0];
            clone.parentNode.replaceChild(FixedTableHeader._copyRow(row), clone);
        }

        //窗口大小改变处理函数
        function resizeHandler() {

            var offset = dom(table).offset();
            if (!offset) return;
            tableHeader.style.top = offset.top + "px";
            tableHeader.style.left = offset.left + "px";

        }

        this.change = change;
        this.tableHeader = tableHeader;
        this.left = x;
        this.top = y;

        dom(window).on("scroll", utils.buffer(scrollHandler, 100));
        dom(window).on("resize", utils.buffer(resizeHandler, 100));
    }

    function _initTableHeader(table, x, y) {
        var tableHeader = document.createElement("div");
        var newTable = FixedTableHeader.cloneFixedTable(table);
        tableHeader.appendChild(newTable);

        tableHeader.id = "fixedTableHeader";
        tableHeader.className = "mod-datas";
        tableHeader.style.display = "none";
        tableHeader.style.position = "absolute";
        tableHeader.style.top = y + "px";
        tableHeader.style.left = x + "px";
        tableHeader.style.zIndex = "100";
        FixedTableHeader.clear();
        table.parentNode.parentNode.appendChild(tableHeader);
        return tableHeader;
    }

    FixedTableHeader.cloneFixedTable = function(table) {

        var newTable = document.createElement("table");
        var thead = document.createElement("thead");
        var topElement = table.getElementsByTagName("tr")[0];
        var cloneRow = FixedTableHeader._copyRow(topElement);

        thead.appendChild(cloneRow); //IE6/7
        newTable.appendChild(thead);

        newTable.className = "data-table cloneThead";
        newTable.width = "1100";
        return newTable;
    };

    FixedTableHeader._copyRow = function(row) {
        var cloneRow = row.cloneNode(true);
        var cloneCells = cloneRow.getElementsByTagName("th");
        if (cloneCells.length < 1) cloneCells = cloneRow.getElementsByTagName("td");

        for (var i = 0, n = cloneCells.length; i < n; i++) {
            row.cells[i].style.width = cloneCells[i].style.width = row.cells[i].clientWidth + "px";
        }
        return cloneRow;
    };

    FixedTableHeader.clear = function() {
        var fixedTableHeader = document.getElementById("fixedTableHeader");
        if (fixedTableHeader) {
            fixedTableHeader.parentNode.removeChild(fixedTableHeader);
        }
    };

    ns.FixedTableHeader = FixedTableHeader;

} (window));

(function(name, ns) {

    ns[name] = new function() {

        var _this = this;
        _this.HSOpening = true;
        _this.HKOpening = true;
        _this.serverTime = new Date();
        _this.style = {
            up: "digi-up",
            down: "digi-down",
            numeric: "digi"
        };

        _this.getDateByHmm = function(hmm) {
            var date = new Date(_this.serverTime.getTime());
            var format = String(hmm);
            var obj = {};
            obj.m = parseInt(format.slice(-2)) || 0;
            obj.h = parseInt(format.slice(0, format.length - 2)) || 0;
            date.setHours(obj.h);
            date.setMinutes(obj.m);
            return date;
        };

        /*
         * 检查指定Date是否开盘时间
         * @param {Date} time 特定时间
         * @parma {Object} openingTime 开盘时间表
         * @param [{Number} delay] 行情延迟时间,单位分钟
         * @return {Boolen}
         */
        _this.isOpening = function(time, openingTime, delay) {
            var startTime1 = openingTime[0][0],
                endTime1 = openingTime[0][1],
                startTime2 = openingTime[1][0],
                endTime2 = openingTime[1][1];

            time = time || _this.serverTime;
            delay = delay || 0;

            startTime1 = _this.getDateByHmm(startTime1);
            startTime2 = _this.getDateByHmm(startTime2);
            endTime1 = _this.getDateByHmm(endTime1);
            endTime2 = _this.getDateByHmm(endTime2);

            //收盘时间加上行情延迟时间
            endTime1.setMinutes(endTime1.getMinutes() + delay);
            endTime2.setMinutes(endTime2.getMinutes() + delay);

            return ((time >= startTime1 && time <= endTime1) ||
            (time >= startTime2 && time <= endTime2));
        };

        //检查港股是否开盘
        _this.isHKOpening = function(time) {
            var openingTime = config.tradeOpening["HK"];
            return _this.isOpening(time, openingTime, config.hkdelay);
        };


        // 检查沪深股市是否开盘
        _this.isHSOpening = function(time) {
            var openingTime = config.tradeOpening["HS"];
            return _this.isOpening(time, openingTime, config.hsdelay);
        };

        // 检查国际股市是否开盘
        _this.isGJOpening = function(trade) {
            var openingTime = config.tradeOpening[trade];
            return _this.isOpening(_this.serverTime, openingTime, config.gjdelay);
        };
        //检查行情时间是否超过30分钟
        _this.checkhqtime=function(hqtime,idss){
            var res=true;
            hqtime.setMinutes(hqtime.getMinutes() + 60);
            if(hqtime<_this.serverTime){
                res=false;
            }
            return res;
        };

        _this.isOpenDate = function(quoteTime) {
            return quoteTime.getDate() === _this.serverTime.getDate();
        };

        //设置是否开盘标志变量
        _this.getTimeZone = function(timezone) {

            ajax.getScript(timezone, 'utf-8', function() {
                _this.serverTime = new Date();
                _this.HSOpening = _this.isHSOpening(_this.serverTime);
                _this.HKOpening = _this.isHKOpening(_this.serverTime);

                setTimeout(function() {//increment
                    var seconds = _this.serverTime.getSeconds();
                    _this.serverTime.setSeconds(seconds + 1);
                    _this.HSOpening = _this.isHSOpening(_this.serverTime);
                    _this.HKOpening = _this.isHKOpening(_this.serverTime);

                    setTimeout(arguments.callee, 1000);
                }, 1000);
            });
        };

        /**
         * 根据涨跌额获取css class
         * @param change 股票涨跌额
         */
        _this.getCssByChange = function(change) {
            change = Number(change);
            if (change > 0) {
                return _this.style.up;

            } else if (change < 0) {
                return _this.style.down;
            }
            return _this.style.numeric;
        };

        /**
         * 根据于昨收比较获取css class
         * @param {Number} compare 股票价格
         * @param {Number} preclose 昨收价格
         * @return {String} 股票涨跌的css className
         */
        _this.getCssByPreclose = function(compare, preclose) {
            preclose = Number(preclose);
            compare = Number(compare);

            if (compare > preclose) {
                return _this.style.up;
            } else if (compare < preclose) {
                return _this.style.down;
            }
            return _this.style.numeric;
        };


        _this.getCss = function() {
            if (arguments.length === 2) {
                return _this.getCssByPreclose.apply(_this, [].slice.call(arguments, 0));
            } else if (arguments.length === 1) {
                return _this.getCssByChange.apply(_this, [].slice.call(arguments, 0));
            }
        };

        /**
         * 根据ID获取市场前缀
         * @param {String} stockID 股票id
         * @return {String} prefix sh/sz
         */
        _this.getMarketPrefixById = function(stockID) {
            var prefix = "";
            var market = stockID.slice(-1);
            if (stockID.length < 7) return prefix;
            //console.log(stockID)
            if (market == 2) {
                prefix = "sz";
            } else if (market == 1) {
                prefix = "sh";
            }
            return prefix;
        };

        /**
         * 根据股票代码返回市场ID
         * @param {String} stockCode 股票代码
         * @reuturn {Number} 市场ID：1 上证；2 深圳
         */
        _this.getMarkesBycode = function(stockCode) {
            var i = stockCode.substring(0, 1);
            var j = stockCode.substring(0, 3);

            if (i === "5" || i === "6" || i === "9") {
                return "1"; //上证股票
            }
            else {
                if (j === "009" || j === "126" || j === "110") {
                    return "1"; //上证股票
                }
                else {
                    return "2"; //深圳股票
                }
            }
        };


        _this.queryTop = function(form) {
            form.action = portalurl+"stockeast/marketlist#" + form.sortField.value + "?sortType=" + form.sortType.value + "&sortRule=-1";
            form.target = "_self";
            form.submit();
        };

    };


} ("quote", window));



//股票行情字典2.0数据CSS
function StockCssClass(dataRow) {
    this.price = quote.getCssByPreclose(dataRow[5], dataRow[3]); //现价;
    this.change = quote.getCssByChange(dataRow[10]); //涨跌;
    this.open = quote.getCssByPreclose(dataRow[4], dataRow[3]); //今开
    this.high = quote.getCssByPreclose(dataRow[6], dataRow[3]); //最高
    this.low = quote.getCssByPreclose(dataRow[7], dataRow[3]); //最低
}


//新版国际指数
function IndexCssClass(dataRow) {
    this.price = quote.getCssByPreclose(dataRow[3], dataRow[11]); //现价;
    this.change = quote.getCssByChange(dataRow[4]); //涨跌;
    this.open = quote.getCssByPreclose(dataRow[8], dataRow[11]); //今开
    this.high = quote.getCssByPreclose(dataRow[9], dataRow[11]); //最高
    this.low = quote.getCssByPreclose(dataRow[10], dataRow[11]); //最低
}

//港股 沪港通 css
function NHKCssClass(dataRow) {
    this.price = quote.getCssByPreclose(dataRow[3], dataRow[12]); //现价;
    this.change = quote.getCssByChange(dataRow[4]); //涨跌;
    this.open = quote.getCssByPreclose(dataRow[11], dataRow[12]); //今开
    this.high = quote.getCssByPreclose(dataRow[13], dataRow[12]); //最高
    this.low = quote.getCssByPreclose(dataRow[14], dataRow[12]); //最低
}

//沪深港通 css
function HSGTCssClass(dataRow) {
    this.price = quote.getCssByPreclose(dataRow[3], dataRow[9]); //现价;
    this.change = quote.getCssByChange(dataRow[4]); //涨跌;
    this.open = quote.getCssByPreclose(dataRow[10], dataRow[9]); //今开
    this.high = quote.getCssByPreclose(dataRow[11], dataRow[9]); //最高
    this.low = quote.getCssByPreclose(dataRow[12], dataRow[9]); //最低
}

//期货行情字典数据CSS
function FuturesCss(dataRow) {
    this.priceCss =  this.price =  quote.getCssByPreclose(dataRow[5], dataRow[13]);
    this.changeCss = this.change = quote.getCssByChange(dataRow[17]);
    this.openCss = this.open =  quote.getCssByPreclose(dataRow[4], dataRow[13]);
    this.maxCss = this.high =  quote.getCssByPreclose(dataRow[6], dataRow[13]);
    this.minCss = this.low =  quote.getCssByPreclose(dataRow[7], dataRow[13]);
}

//板块字典数据CSS，夏敏林提供数据
function BKCssClass(dataRow) {
    this.bkChange = quote.getCssByChange(parseFloat(dataRow[1]));
    this.stockChange = quote.getCssByChange(dataRow[8]);
}

//AH股数据字典CSS
function AHCssClass(dataRow){
    this.h = quote.getCssByChange(parseFloat(dataRow[3]));
    this.a = quote.getCssByChange(parseFloat(dataRow[6]));
}

function FixAmt(value) {
    var result = value;
    if(value!="--" && value!="-" && value!=""){
        result=parseFloat(value);
        if (value >= 10000000000) {result =(value / 100000000).toFixed(0)+"亿";}
        else if (value >= 1000000000) {result =(value / 100000000).toFixed(1)+"亿";}
        else if (value >= 100000000) {result =(value / 100000000).toFixed(2)+"亿";}
        else if (value >= 1000000) {result =(value / 10000).toFixed(0)+"万";}
        else if (value >= 100000) {result =(value / 10000).toFixed(1)+"万";}
        else if (value >= 10000) {result =(value / 10000).toFixed(2)+"万";}
    }
    return result;
}


//连续滚动
(function (name, ns){
//class Scroll {
    /*
     @ continer 滚动内容DOM容器
     @ option 可选配置参数
     */
    function Scroll(continer, option){

    }

    Scroll.prototype = {

    };

    ns[name] = name;
//}
}("Scroll", window));


(function(name, ns) {

    var config = {

        hqdigi2: "http://hqdigi2.eastmoney.com/EM_Quote2010NumericApplication/Index.aspx",
        hq2hk: "http://hq2hk.eastmoney.com/EM_Quote2010NumericApplication/Index.aspx",
        hq2nhk: "http://nufm.dfcfw.com/EM_Finance2014NumericApplication/JS.aspx",
        hq2gjgp: "http://hq2gjgp.eastmoney.com/EM_Quote2010NumericApplication/Index.aspx",
        hq2gjqh: "http://hq2gjqh.eastmoney.com/EM_Futures2010NumericApplication/index.aspx",
        bkQuery: "http://hq2data.eastmoney.com/bk/BKQuery.aspx",
        AHQuoteList: "http://nufm.dfcfw.com/EM_Finance2014NumericApplication/JS.aspx",
        hq2gnqh: "http://nufm.dfcfw.com/EM_Finance2014NumericApplication/JS.aspx",
        hq2hgt: "http://nufm.dfcfw.com/EM_Finance2014NumericApplication/JS.aspx",
        hq2yhj: "http://nufm.dfcfw.com/EM_Finance2014NumericApplication/JS.aspx",

        //hqgnqhpic EM_Futures2010NumericApplication
        //hq2gnqh   EM_Futures2010PictureProducter
        //hqqjqhpic
        //hq2gjqh
        //hq2hk
        //hqhkpic
        hkdelay: 15, //港股延迟15分钟时间格式
        hsdelay: 1, //沪深延迟2分钟
        gjdelay: 30, //国际股票延迟50分钟
        tradeOpening: {

            // LocalCSEALL
            "HS": [[930, 1130], [1300, 1500]],

            "HK": [[930, 1200], [1300, 1600]],

            //Africa
            //TOP407: [[0, 0], [1500, 2300]],
            CASE7: [[0, 30], [1600, 2400]],

            //Oceania
            AS517: [[800, 1400], [0, 0]],
            NZSE50FG7: [[700, 1300], [0, 0]],

            //Asia
            NKY7: [[800, 1030], [1130, 1400]],
            KOSPI7: [[800, 1400], [0, 0]],
            FSSTI7: [[900, 1230], [1400, 1700]],
            TWSE7: [[900, 1345], [0, 0]],
            SENSEX7: [[1130, 1830], [0, 0]],
            JCI7: [[1000, 1300], [1230, 1700]],
            VNINDEX7: [[1015, 1230], [1400,1500]],
            FBMKLC7: [[900, 1230], [1430, 1700]],
            SET7: [[1100, 1330], [1530, 1730]],
            KSE1007: [[1230, 1830], [0, 0]],
            PCOMP7: [[900, 1200], [0, 0]],
            CSEALL7: [[1100, 1600], [0, 0]],

            //America
            INDU7: [[0, 400], [2130, 2400]],
            SPX7: [[0, 400], [2130, 2400]],
            CCMP7: [[0, 400], [2130, 2400]],
            SPTSX7: [[0, 400], [2130, 2400]],
            MEXBOL7: [[0, 400], [2130, 2400]],
            IBOV7: [[0, 430], [2100, 2400]],

            //冬令时
            UKX7: [[0, 0], [1600, 2430]],
            DAX7: [[0, 0], [1600, 2430]],
            CAC7: [[0, 0], [1600, 2430]],
            IBEX7: [[0, 0], [1600, 2430]],
            FTSEMIB7: [[0, 0], [1600, 2430]],
            AEX7: [[0, 0], [1600, 2430]],
            SMI7: [[0, 0], [1600, 2430]],
            OMX7: [[0, 0], [1600, 2430]],
            ICEXI7: [[1745, 2345], [0, 0]],
            ISEQ7: [[0, 0], [1600, 2430]],
            INDEXCF7: [[0, 0], [1400, 2245]],
            ASE7: [[1600, 2330], [0, 0]],
            BEL207: [[0, 0], [1615, 2435]],
            LUXXX7: [[0, 0], [1600, 2430]],
            HEX7: [[0, 0], [1600, 2430]],
            KFX7: [[0, 0], [1600, 2430]],
            OBX7: [[1600, 2330], [0, 0]],
            ATX7: [[0, 0], [1600, 2430]],
            WIG7: [[1600, 2400], [0, 0]],
            PX7: [[1600, 2430], [0, 0]],
            TOP407: [[0, 0], [1400, 2400]]

            //夏令时
            //UKX7: [[0, 0], [1500, 2330]],
            //DAX7: [[0, 0], [1500, 2330]],
            //CAC7: [[0, 0], [1500, 2330]],
            //IBEX7: [[0, 0], [1500, 2330]],
            //FTSEMIB7: [[0, 0], [1500, 2330]],
            //AEX7: [[0, 0], [1500, 2330]],
            //SMI7: [[0, 0], [1500, 2330]],
            //OMX7: [[0, 0], [1500, 2330]],
            //ICEXI7: [[1745, 2345], [0, 0]],
            //ISEQ7: [[0, 0], [1500, 2330]],
            //INDEXCF7: [[0, 0], [1400, 2245]],
            //ASE7: [[1500, 2330], [0, 0]],
            //BEL207: [[0, 0], [1515, 2335]],
            //LUXXX7: [[0, 0], [1500, 2330]],
            //HEX7: [[0, 0], [1500, 2330]],
            //KFX7: [[0, 0], [1500, 2330]],
            //OBX7: [[1500, 2330], [0, 0]],
            //ATX7: [[0, 0], [1500, 2330]],
            //WIG7: [[1500, 2400], [0, 0]],
            //PX7: [[1500, 2430], [0, 0]],
            //TOP407: [[0, 0], [1500, 2300]]
        }

    };

    //export
    ns[name] = config;
} ("config", window));

(function(ns) {

    var fields = {
        "z": "quotation",
        "s": "rank",
        "c": "record"
    };

    //class Model {

    function Model(query, view) {

        this.query = query;
        this.view = view;

        this.param = queryString.parse(this.query);
        this.field = fields[this.param.type] || "rank";
    }

    Model.prototype = {

        load: function() {

            var param = this.param;
            var view = this.view;
            var field = this.field;
            var url = this.url + "?" + queryString.serialize(param) + "&dt=" + (+new Date());

            ajax.getScript(url, "utf-8", function() {
                if (!window[param.jsName]) return;

                view.render(window[param.jsName][field]);

            });
        },

        update: new Function(),

        url: ""

    };


    function HSModel(query, view) {
        Model.call(this, query, view);
        this.url = config.hqdigi2;
    }

    HSModel.prototype = Model.extend();

    //override
    HSModel.prototype.update = function() {

        if (quote.HSOpening) {
            this.load();
        }
    };


    //沪深港通
    function HGTModel(query, view) {
        Model.call(this, query, view);
        this.url = config.AHQuoteList;
    }

    HGTModel.prototype = Model.extend();

    //override
    HGTModel.prototype.update = function () {

        if (quote.HSOpening) {
            this.load();
        }
    };



    function HKModel(query, view) {

        Model.call(this, query, view);
        this.url = config.hq2hk;
    }

    HKModel.prototype = Model.extend();

    //override
    HKModel.prototype.update = function() {

        if (quote.HKOpening) {

            this.load();
        }
    };

    //class NHKModel {

    function NHKModel(query, view) {

        Model.call(this, query, view);
        this.url = config.hq2nhk;
    }

    NHKModel.prototype = Model.extend();

    //override
    NHKModel.prototype.update = function() {

        if (quote.HKOpening) {

            this.load();
        }
    };

    //class HGTModel {

    function HGTModel(query, view) {

        Model.call(this, query, view);
        this.url = config.hq2hgt;
    }

    HGTModel.prototype = Model.extend();

    //override
    HGTModel.prototype.update = function() {

        if (quote.HSOpening || quote.HKOpening) {

            this.load();
        }
    };

    //class YhjModel {

    function YhjModel(query, view) {

        Model.call(this, query, view);
        this.url = config.hq2yhj;
    }

    YhjModel.prototype = Model.extend();

    //override
    YhjModel.prototype.update = function() {
        this.load();
    };

    //}

    //}


    //class HKModel {

    function AHModel(query, view) {

        HKModel.call(this, query, view);
        this.field = "rank";
        this.url = config.AHQuoteList;
    }

    AHModel.prototype = HKModel.extend();
    //}

    //class FundModel {

    function FundModel(query, view) {
        HSModel.call(this, query, view);
    }

    FundModel.prototype = HSModel.extend();
    //}


    //class USModel {

    function USModel(query, view) {

        Model.call(this, query, view);
        this.url = config.hq2nhk;
    }

    USModel.prototype = Model.extend();

    //override
    USModel.prototype.update = function() {

        this.load(); //175.5 509.9
    };

    //}

    //国际期货
    //class FuturesModel {

    function FuturesModel(query, view) {

        Model.call(this, query, view);
        this.field = "rank";
        this.url = config.hq2nhk;
    }

    FuturesModel.prototype = Model.extend();

    //override
    FuturesModel.prototype.update = function() {

        this.load(); //175.5 509.9
    };

    //贵金属

    function GoldModel(query, view) {

        Model.call(this, query, view);
        this.field = "futures";
        this.url = config.hq2gjqh;
    }

    GoldModel.prototype = Model.extend();

    //override
    GoldModel.prototype.update = function () {

        this.load(); //175.5 509.9
    };

    //}

    //国内期货
    //class GNFuturesModel {

    function GNFuturesModel(query, view) {

        FuturesModel.call(this, query, view);
        this.field = "rank";
        this.url = config.hq2gnqh;
    }

    GNFuturesModel.prototype = FuturesModel.extend();

    //}


    ns.GNFuturesModel = GNFuturesModel;
    ns.FuturesModel = FuturesModel;
    ns.GoldModel = GoldModel;
    ns.USModel = USModel;
    ns.FundModel = FundModel;
    ns.AHModel = AHModel;
    ns.HKModel = HKModel;
    ns.NHKModel = NHKModel;
    ns.HGTModel = HGTModel;
    ns.HSModel = HSModel;
    ns.YhjModel = YhjModel;

} (window));


//全球股市
(function(name, ns) {

    function GlobalIndex(chart, indexList) {

        this.chart = new ChartView(mini(chart));
        this.indexList = indexList;
    }

    GlobalIndex.prototype = {

        indexurl: "http://nufm.dfcfw.com/EM_Finance2014NumericApplication/JS.aspx?type=CT&cmd={0}&sty=FCRH&st=z&sr=&p=&ps=&cb=&js=var%20indexListEntity=[(x)]&token=1942f5da9b46b069953c873404aad4b5",

        indexList: [],

        chart: null,

        onloaded: function(data) {

            var div = document.createElement("div");
            var row = null, tr = null, newTr;
            var id, name, dr, market, opening = false, rungif = "", runtext = "", css, href, opendate = false;

            if (!data && data.stats == false) {
                return;
            }

            for (var i = 0; i < data.length; i++) {
                dr = String(data[i]).split(",");
                if (dr.length > 6) {

                    id = dr[1] + dr[0];
                    name = dr[2];
                    market = dr[0];
                    opendate = quote.isOpenDate(new Date(dr[6].replace(/-/g, "/")));
                    opentag = dr[7];

                    if (market == "_UIFO" && dr[1] != "110010" && dr[1] != "110030" && dr[1] != "110050" && dr[1] != "110000") { //gj
                        //opening = this.isOpening(id);
                        //opening = quote.isGJOpening(id);
                        href = "http://quote.eastmoney.com/gb/zs";
                        id = dr[1] + "7";
                    } else if (market == "1" || market == "2") { //HS
                        //opening = quote.isHSOpening();
                        href = "http://quote.eastmoney.com/zs";

                    } else { //HK
                        //opening = quote.isHKOpening();
                        href = "http://quote.eastmoney.com/hk/zs";
                        id = dr[1] + "5";
                    }

                    var css = new IndexCssClass(dr);

                    //rungif = opendate && opening ? "hq_on.gif" : "hq_off.gif";
                    //runtext = opendate && opening ? "开盘中" : "已收盘";

                    rungif = opentag == "0" ? "hq_on.gif" : "hq_off.gif";
                    runtext = opentag == "0" ? "开盘中" : "已收盘";

                    //if (market > 5 && !quote.checkhqtime(new Date(dr[28].replace(/-/g, "/")), id)) {
                    //    rungif = "hq_off.gif";
                    //    runtext = "已收盘 x";
                    //}

                    row = this.createItem(dr, css, runtext, rungif, href);

                    //update ui
                    tr = mini("#" + id)[0];
                    if (!tr) continue;
                    div.innerHTML = row;
                    newTr = div.getElementsByTagName("tr")[0];
                    newTr.id = id;
                    tr.parentNode.replaceChild(newTr, tr);
                }
            }
        },

        createItem: function (dr, css, runtext, rungif, href) {
            var time = (new Date(dr[6].replace(/-/g, "/"))).format("MM-dd HH:mm");

            if (parseFloat(dr[7]) != "0" && parseFloat(dr[7]) != "1" && parseFloat(dr[7]) != "2" && parseFloat(dr[7]) != "3") {
                rungif = "hq_off.gif";
                time = "-";
                for (var i = 3; i < dr.length; i++) {//重置数组
                    dr[i] = "-";

                }
            }

            var imgsrc = "";
            if (rungif == "hq_off.gif")
                imgsrc = "http://g1.dfcfw.com/g2/201608/20160816134557.gif";
            else {
                imgsrc = "http://g1.dfcfw.com/g2/201608/20160816134547.gif";
            }

            return '<table><tr>' +
                '<td class="txt-left">' +
                '<img title="' + runtext + '" src="' + imgsrc + '" class="open-state">' +
                '<a href="' + href + dr[1] + '.html" target="_blank">' + dr[2] + '</a></td>' +
                '<td><span class="' + css.change + '">' + dr[3] + '</span></td>' +
                '<td><span class="' + css.change + '">' + dr[4] + '</span></td>' +
                '<td><span class="' + css.change + '">' + dr[5] + '</span></td>' +
                '<td>' + time + '</td>' +
                '<tr></table>';
        },

        isOpening: function(trade) {
            var tradeTime = config.tradeOpening[trade];
            return tradeTime && quote.isOpening(quote.serverTime, tradeTime);
        },

        init: function() {
            this.chart.render();
            this.load(this.indexList);
        },

        load: function(indexList) {
            var _this = this;
            var url = this.indexurl.replace("{0}", indexList.join(","));
            ajax.getScript(url, "utf-8", function() {
                var param = queryString.parse(url);
                _this.onloaded(window["indexListEntity"]);
            });
        },

        update: function() {
            this.init();
        }

    };
    ns[name] = GlobalIndex;
} ("GlobalIndex", window));

//惰性加载
(function(ns){

    //检查元素是否在可视区域
    var viewHeight = utils.windowSize().height;
    function inView(elem){

        var scrollTop = utils.documentScrollTop();
        var offset = dom(elem).offset();
        var top = offset.top - scrollTop;
        var bottom = top + elem.offsetHeight;

        return ((top > 0 && top < viewHeight ) || (bottom > 0 && bottom< viewHeight ));
    }
    utils.inView = inView;

    function lazyModel(list){
        var executing = false;
        var execute = function(){
            if(executing) return;
            executing = true;

            for(var i = 0; i<list.length; i++){

                if(!list[i].lazyElem || utils.inView(list[i].lazyElem) ){
                    list[i].load();
                    list.splice(i,1);
                }
            }

            executing = false;
        };

        var handle = utils.buffer(execute, 100);
        var interval = setInterval(function(){

            if(list.length === 0){
                clearInterval(interval);
                dom(window).unbind("scroll", handle);
            }else {
                execute();
            }

        },500);

        dom(window).bind("scroll", handle);
    }

    ns.lazyModel = lazyModel;

//仅刷新可视区域内容		  
//class LazyTimer {	

    function LazyTimer(delay){
        this.delay = delay;
        this.list = {};
        this.cache = {};
        var _this = this;

        dom(window).on("scroll", utils.buffer(function(){

            for(var i in _this.cache){

                if(_this.list.hasOwnProperty(i) ) {

                    if(!_this.cache[i].lazyElem || utils.inView(_this.cache[i].lazyElem) ){

                        _this.list[i] = _this.cache[i];

                    }else {

                        _this.list[i] = LazyTimer.nullObject;
                    }
                }
            }

        }, 100));
    }

    LazyTimer.nullObject = { update: new Function() };

    LazyTimer.prototype = {

        start: function(){
            var _this = this;
            var delay = _this.delay;
            clearTimeout(_this.id);

            _this.id = setTimeout(function(){
                _this.execute();
                setTimeout(arguments.callee, delay);
            },delay);
        },

        execute: function(){

            for(var i in this.list){

                if( this.list.hasOwnProperty(i) ){
                    this.list[i].update();
                }
            }

        },

        add: function(model){//IUpdate
            var uid = +new Date();
            uid += Math.floor( Math.random() * 1000);
            this.cache[uid] = this.list[uid] = model;
            if(this.cache[uid].lazyElem && !utils.inView(this.cache[uid].lazyElem) ){
                this.list[uid] = LazyTimer.nullObject;
            }

            return uid;
        },

        remove: function(i){
            delete( this.list[i] );
            delete( this.cache[i] );
        },

        set: function(i, model){
            this.cache[i] = this.list[i] = model;

            if(this.cache[i].lazyElem && !utils.inView(this.cache[i].lazyElem) ){

                this.list[i] = LazyTimer.nullObject;
            }
        },

        clear: function(){
            clearTimeout(_this.id);
        }

    };
//}
    ns.LazyTimer = LazyTimer;
}(window));

(function(ns){

    var requestAnimFrame = (function(callback){
        return window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function(callback){
                window.setTimeout(callback, 1000 / 60);
            };
    })();

    function QCScroll(element){

        var width = 0;
        var container = document.createElement("div");
        var _this = this;
        _this.element = element;
        _this.run = true;
        container.innerHTML = element.innerHTML;
        element.innerHTML = "";
        element.appendChild(container);

        //获取元素真实宽度
        container.style.cssText = "position: absolute; visibility:hidden; left:0; white-space:nowrap;";
        width = container.offsetWidth;
        container.style.cssText= "";
        container.style.width = width + "px";
        container.onmouseover = function(){
            _this.run = false;
        };

        container.onmouseout = function(){
            _this.run = true;
            clearTimeout(_this.timer);
            _this.timer = setTimeout(function(){
                _this.animate();
            },200)

        };
    }

    QCScroll.prototype = {

        animate: function(){
            var _this = this;
            var element = _this.element;
            if(!_this.run) return;
            element.scrollLeft++;

            if(element.scrollLeft +  element.clientWidth >=  element.scrollWidth) {
                element.scrollLeft = 0;

            }

            requestAnimFrame(function(){
                _this.animate();
            });
        }
    };

    ns.QCScroll = QCScroll;

}(window));

var pageNavTemplate = {

    itemscount: 10,

    firstpage: '<a data-page="1">1</a>...',

    lastpage: '...<a data-page="{$pagecount}">{$pagecount}</a>',

    disable: '<span class="disable">{$text}</span>',

    nextpage: '<a data-page="{$nextpage}" >下一页</a>',

    prepage: '<a data-page="{$prepage}">上一页</a>',

    pageitem: '<a data-page="{$num}">{$num}</a>',

    current: '<span class="current">{$num}</span>',

    gopage: ' 转到 <input type="text" value="{$num}" class="num" id="pagenum"/> 页 ' +
    '<b type="button" data-get="pagenum" data-property="value" class="go" id="page-go"></b>'
};
PageNavigation.prototype.config = pageNavTemplate;

//沪深AB股交易时间
//股指期货交易时间
//港股交易时间
var treeMenu = mini("#treemenu")[0];
var menu = new TreeMenu("#treemenu");
if(typeof(tmopid)!="undefined"){menu.init(route.parseopt(tmopid));}else{menu.init(route.parse());}
var refreshElem = mini("#refresh")[0];
var bookMarkElem = mini("#bookMark")[0];
refreshElem && (refreshElem.onclick = function(){
    window.location.reload();
});
bookMarkElem && (bookMarkElem.onclick = function(){
    var name = document.title;
    var title = document.title;
    var url = location.href;

    if (window.sidebar) // firefox
        window.sidebar.addPanel(title, url, "");
    else if(window.opera && window.print){ // opera
        var elem = document.createElement('a');
        elem.setAttribute('href',url);
        elem.setAttribute('title',title);
        elem.setAttribute('rel','sidebar');
        elem.click();
    }
    else if(document.all){ // ie
        window.external.AddFavorite(url, title);
    }
    else {
        alert('加入收藏夹失败，请使用Ctrl+D添加');
    }
});

quote.getTimeZone("http://quote.eastmoney.com/timezone.js");

